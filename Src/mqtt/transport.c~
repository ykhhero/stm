/*******************************************************************************
 * Copyright (c) 2014 IBM Corp.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 *
 * The Eclipse Public License is available at
 *    http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 *   http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *    Ian Craggs - initial API and implementation and/or initial documentation
 *    Sergio R. Caprile - "commonalization" from prior samples and/or documentation extension
 *******************************************************************************/



/**
This simple low-level implementation assumes a single connection for a single thread. Thus, a static
variable is used for that connection.
On other scenarios, the user must solve this by taking into account that the current implementation of
MQTTPacket_read() has a function pointer for a function call to get the data to a buffer, but no provisions
to know the caller or other indicator (the socket id): int (*getfn)(unsigned char*, int)
*/

#include "sim800c.h"
#include "delay.h"

#define TCP_RX_DATA_BUFFER_SIZE 1024
char tcp_rx_data_buffer[TCP_RX_DATA_BUFFER_SIZE];
int tcp_rx_data_buffer_start = 0;
int tcp_rx_data_buffer_end = 0;

int tcp_rx_data_length()
{
	if (tcp_rx_data_buffer_end >= tcp_rx_data_buffer_start) {
		return (tcp_rx_data_buffer_end - tcp_rx_data_buffer_start);
	}
	else {
		return (TCP_RX_DATA_BUFFER_SIZE - (tcp_rx_data_buffer_start - tcp_rx_data_buffer_end));
	}
}

int tcp_rx_push_data(char* str, int len)
{
	int i;
	int pos;
	
	for (i = 0; i < len; ++i) {
		pos = (tcp_rx_data_buffer_end + i) % TCP_RX_DATA_BUFFER_SIZE;
		if (pos == tcp_rx_data_buffer_start - 1) {
			break;
		}
		tcp_rx_data_buffer[(tcp_rx_data_buffer_end + i) % TCP_RX_DATA_BUFFER_SIZE] = str[i];
	}
	tcp_rx_data_buffer_end = (tcp_rx_data_buffer_end + i) % TCP_RX_DATA_BUFFER_SIZE;
	
	return i;
}

int tcp_rx_pop_data(char* str, int len)
{
	int count = 0;
	int pos = tcp_rx_data_buffer_start;

	while (pos != tcp_rx_data_buffer_end) {
		str[count++] = tcp_rx_data_buffer[pos++];
		if (count == len) break;

		pos %= TCP_RX_DATA_BUFFER_SIZE;
	}

	tcp_rx_data_buffer_start = (tcp_rx_data_buffer_start + count) % TCP_RX_DATA_BUFFER_SIZE;
	
	if (tcp_rx_data_buffer_start == tcp_rx_data_buffer_end) {
		tcp_rx_data_buffer_start = 0;
		tcp_rx_data_buffer_end = 0;
	}
	return count;
}

int transport_sendPacketBuffer(int sock, unsigned char* buf, int buflen)
{
	return sim800c_write_tcp_data((char*)buf, buflen);
}


int transport_getdata(unsigned char* buf, int count)
{
	int len = 0;
	char* d = 0;
	
	d = sim800c_read_tcp_data(&len, 100);
	if (d && len > 0) {
		tcp_rx_push_data(d, len);
	}

	if (count > tcp_rx_data_length()) {
		return 0;
	}

	return tcp_rx_pop_data((char*)buf, count);	
}

int transport_getdatanb(void *sck, unsigned char* buf, int count)
{
return 0;
}

/**
return >=0 for a socket descriptor, <0 for an error code
@todo Basically moved from the sample without changes, should accomodate same usage for 'sock' for clarity,
removing indirections
*/
int transport_open(char* addr, int port)
{
	init_sim800c();
	if (!sim800c_connect_server(addr, port)) {
		return -1;
	}
	return 0;
}

int transport_close(int sock)
{
	sim800c_close_tcp();
	return 1;
}
